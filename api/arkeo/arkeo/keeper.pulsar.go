// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package arkeo

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var _ protoreflect.List = (*_Provider_8_list)(nil)

type _Provider_8_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Provider_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Provider_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Provider_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Provider_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Provider_8_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Provider_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Provider_8_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Provider_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Provider_9_list)(nil)

type _Provider_9_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Provider_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Provider_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Provider_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Provider_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Provider_9_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Provider_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Provider_9_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Provider_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Provider                       protoreflect.MessageDescriptor
	fd_Provider_pub_key               protoreflect.FieldDescriptor
	fd_Provider_service               protoreflect.FieldDescriptor
	fd_Provider_metadata_uri          protoreflect.FieldDescriptor
	fd_Provider_metadata_nonce        protoreflect.FieldDescriptor
	fd_Provider_status                protoreflect.FieldDescriptor
	fd_Provider_min_contract_duration protoreflect.FieldDescriptor
	fd_Provider_max_contract_duration protoreflect.FieldDescriptor
	fd_Provider_subscription_rate     protoreflect.FieldDescriptor
	fd_Provider_pay_as_you_go_rate    protoreflect.FieldDescriptor
	fd_Provider_bond                  protoreflect.FieldDescriptor
	fd_Provider_last_update           protoreflect.FieldDescriptor
	fd_Provider_settlement_duration   protoreflect.FieldDescriptor
)

func init() {
	file_arkeo_arkeo_keeper_proto_init()
	md_Provider = File_arkeo_arkeo_keeper_proto.Messages().ByName("Provider")
	fd_Provider_pub_key = md_Provider.Fields().ByName("pub_key")
	fd_Provider_service = md_Provider.Fields().ByName("service")
	fd_Provider_metadata_uri = md_Provider.Fields().ByName("metadata_uri")
	fd_Provider_metadata_nonce = md_Provider.Fields().ByName("metadata_nonce")
	fd_Provider_status = md_Provider.Fields().ByName("status")
	fd_Provider_min_contract_duration = md_Provider.Fields().ByName("min_contract_duration")
	fd_Provider_max_contract_duration = md_Provider.Fields().ByName("max_contract_duration")
	fd_Provider_subscription_rate = md_Provider.Fields().ByName("subscription_rate")
	fd_Provider_pay_as_you_go_rate = md_Provider.Fields().ByName("pay_as_you_go_rate")
	fd_Provider_bond = md_Provider.Fields().ByName("bond")
	fd_Provider_last_update = md_Provider.Fields().ByName("last_update")
	fd_Provider_settlement_duration = md_Provider.Fields().ByName("settlement_duration")
}

var _ protoreflect.Message = (*fastReflection_Provider)(nil)

type fastReflection_Provider Provider

func (x *Provider) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Provider)(x)
}

func (x *Provider) slowProtoReflect() protoreflect.Message {
	mi := &file_arkeo_arkeo_keeper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Provider_messageType fastReflection_Provider_messageType
var _ protoreflect.MessageType = fastReflection_Provider_messageType{}

type fastReflection_Provider_messageType struct{}

func (x fastReflection_Provider_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Provider)(nil)
}
func (x fastReflection_Provider_messageType) New() protoreflect.Message {
	return new(fastReflection_Provider)
}
func (x fastReflection_Provider_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Provider
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Provider) Descriptor() protoreflect.MessageDescriptor {
	return md_Provider
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Provider) Type() protoreflect.MessageType {
	return _fastReflection_Provider_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Provider) New() protoreflect.Message {
	return new(fastReflection_Provider)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Provider) Interface() protoreflect.ProtoMessage {
	return (*Provider)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Provider) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.PubKey) != 0 {
		value := protoreflect.ValueOfBytes(x.PubKey)
		if !f(fd_Provider_pub_key, value) {
			return
		}
	}
	if x.Service != int32(0) {
		value := protoreflect.ValueOfInt32(x.Service)
		if !f(fd_Provider_service, value) {
			return
		}
	}
	if x.MetadataUri != "" {
		value := protoreflect.ValueOfString(x.MetadataUri)
		if !f(fd_Provider_metadata_uri, value) {
			return
		}
	}
	if x.MetadataNonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MetadataNonce)
		if !f(fd_Provider_metadata_nonce, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Provider_status, value) {
			return
		}
	}
	if x.MinContractDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.MinContractDuration)
		if !f(fd_Provider_min_contract_duration, value) {
			return
		}
	}
	if x.MaxContractDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.MaxContractDuration)
		if !f(fd_Provider_max_contract_duration, value) {
			return
		}
	}
	if len(x.SubscriptionRate) != 0 {
		value := protoreflect.ValueOfList(&_Provider_8_list{list: &x.SubscriptionRate})
		if !f(fd_Provider_subscription_rate, value) {
			return
		}
	}
	if len(x.PayAsYouGoRate) != 0 {
		value := protoreflect.ValueOfList(&_Provider_9_list{list: &x.PayAsYouGoRate})
		if !f(fd_Provider_pay_as_you_go_rate, value) {
			return
		}
	}
	if x.Bond != "" {
		value := protoreflect.ValueOfString(x.Bond)
		if !f(fd_Provider_bond, value) {
			return
		}
	}
	if x.LastUpdate != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastUpdate)
		if !f(fd_Provider_last_update, value) {
			return
		}
	}
	if x.SettlementDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.SettlementDuration)
		if !f(fd_Provider_settlement_duration, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Provider) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "arkeo.arkeo.Provider.pub_key":
		return len(x.PubKey) != 0
	case "arkeo.arkeo.Provider.service":
		return x.Service != int32(0)
	case "arkeo.arkeo.Provider.metadata_uri":
		return x.MetadataUri != ""
	case "arkeo.arkeo.Provider.metadata_nonce":
		return x.MetadataNonce != uint64(0)
	case "arkeo.arkeo.Provider.status":
		return x.Status != 0
	case "arkeo.arkeo.Provider.min_contract_duration":
		return x.MinContractDuration != int64(0)
	case "arkeo.arkeo.Provider.max_contract_duration":
		return x.MaxContractDuration != int64(0)
	case "arkeo.arkeo.Provider.subscription_rate":
		return len(x.SubscriptionRate) != 0
	case "arkeo.arkeo.Provider.pay_as_you_go_rate":
		return len(x.PayAsYouGoRate) != 0
	case "arkeo.arkeo.Provider.bond":
		return x.Bond != ""
	case "arkeo.arkeo.Provider.last_update":
		return x.LastUpdate != int64(0)
	case "arkeo.arkeo.Provider.settlement_duration":
		return x.SettlementDuration != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Provider"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Provider does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Provider) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "arkeo.arkeo.Provider.pub_key":
		x.PubKey = nil
	case "arkeo.arkeo.Provider.service":
		x.Service = int32(0)
	case "arkeo.arkeo.Provider.metadata_uri":
		x.MetadataUri = ""
	case "arkeo.arkeo.Provider.metadata_nonce":
		x.MetadataNonce = uint64(0)
	case "arkeo.arkeo.Provider.status":
		x.Status = 0
	case "arkeo.arkeo.Provider.min_contract_duration":
		x.MinContractDuration = int64(0)
	case "arkeo.arkeo.Provider.max_contract_duration":
		x.MaxContractDuration = int64(0)
	case "arkeo.arkeo.Provider.subscription_rate":
		x.SubscriptionRate = nil
	case "arkeo.arkeo.Provider.pay_as_you_go_rate":
		x.PayAsYouGoRate = nil
	case "arkeo.arkeo.Provider.bond":
		x.Bond = ""
	case "arkeo.arkeo.Provider.last_update":
		x.LastUpdate = int64(0)
	case "arkeo.arkeo.Provider.settlement_duration":
		x.SettlementDuration = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Provider"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Provider does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Provider) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "arkeo.arkeo.Provider.pub_key":
		value := x.PubKey
		return protoreflect.ValueOfBytes(value)
	case "arkeo.arkeo.Provider.service":
		value := x.Service
		return protoreflect.ValueOfInt32(value)
	case "arkeo.arkeo.Provider.metadata_uri":
		value := x.MetadataUri
		return protoreflect.ValueOfString(value)
	case "arkeo.arkeo.Provider.metadata_nonce":
		value := x.MetadataNonce
		return protoreflect.ValueOfUint64(value)
	case "arkeo.arkeo.Provider.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "arkeo.arkeo.Provider.min_contract_duration":
		value := x.MinContractDuration
		return protoreflect.ValueOfInt64(value)
	case "arkeo.arkeo.Provider.max_contract_duration":
		value := x.MaxContractDuration
		return protoreflect.ValueOfInt64(value)
	case "arkeo.arkeo.Provider.subscription_rate":
		if len(x.SubscriptionRate) == 0 {
			return protoreflect.ValueOfList(&_Provider_8_list{})
		}
		listValue := &_Provider_8_list{list: &x.SubscriptionRate}
		return protoreflect.ValueOfList(listValue)
	case "arkeo.arkeo.Provider.pay_as_you_go_rate":
		if len(x.PayAsYouGoRate) == 0 {
			return protoreflect.ValueOfList(&_Provider_9_list{})
		}
		listValue := &_Provider_9_list{list: &x.PayAsYouGoRate}
		return protoreflect.ValueOfList(listValue)
	case "arkeo.arkeo.Provider.bond":
		value := x.Bond
		return protoreflect.ValueOfString(value)
	case "arkeo.arkeo.Provider.last_update":
		value := x.LastUpdate
		return protoreflect.ValueOfInt64(value)
	case "arkeo.arkeo.Provider.settlement_duration":
		value := x.SettlementDuration
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Provider"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Provider does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Provider) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "arkeo.arkeo.Provider.pub_key":
		x.PubKey = value.Bytes()
	case "arkeo.arkeo.Provider.service":
		x.Service = int32(value.Int())
	case "arkeo.arkeo.Provider.metadata_uri":
		x.MetadataUri = value.Interface().(string)
	case "arkeo.arkeo.Provider.metadata_nonce":
		x.MetadataNonce = value.Uint()
	case "arkeo.arkeo.Provider.status":
		x.Status = (ProviderStatus)(value.Enum())
	case "arkeo.arkeo.Provider.min_contract_duration":
		x.MinContractDuration = value.Int()
	case "arkeo.arkeo.Provider.max_contract_duration":
		x.MaxContractDuration = value.Int()
	case "arkeo.arkeo.Provider.subscription_rate":
		lv := value.List()
		clv := lv.(*_Provider_8_list)
		x.SubscriptionRate = *clv.list
	case "arkeo.arkeo.Provider.pay_as_you_go_rate":
		lv := value.List()
		clv := lv.(*_Provider_9_list)
		x.PayAsYouGoRate = *clv.list
	case "arkeo.arkeo.Provider.bond":
		x.Bond = value.Interface().(string)
	case "arkeo.arkeo.Provider.last_update":
		x.LastUpdate = value.Int()
	case "arkeo.arkeo.Provider.settlement_duration":
		x.SettlementDuration = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Provider"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Provider does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Provider) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.Provider.subscription_rate":
		if x.SubscriptionRate == nil {
			x.SubscriptionRate = []*v1beta1.Coin{}
		}
		value := &_Provider_8_list{list: &x.SubscriptionRate}
		return protoreflect.ValueOfList(value)
	case "arkeo.arkeo.Provider.pay_as_you_go_rate":
		if x.PayAsYouGoRate == nil {
			x.PayAsYouGoRate = []*v1beta1.Coin{}
		}
		value := &_Provider_9_list{list: &x.PayAsYouGoRate}
		return protoreflect.ValueOfList(value)
	case "arkeo.arkeo.Provider.pub_key":
		panic(fmt.Errorf("field pub_key of message arkeo.arkeo.Provider is not mutable"))
	case "arkeo.arkeo.Provider.service":
		panic(fmt.Errorf("field service of message arkeo.arkeo.Provider is not mutable"))
	case "arkeo.arkeo.Provider.metadata_uri":
		panic(fmt.Errorf("field metadata_uri of message arkeo.arkeo.Provider is not mutable"))
	case "arkeo.arkeo.Provider.metadata_nonce":
		panic(fmt.Errorf("field metadata_nonce of message arkeo.arkeo.Provider is not mutable"))
	case "arkeo.arkeo.Provider.status":
		panic(fmt.Errorf("field status of message arkeo.arkeo.Provider is not mutable"))
	case "arkeo.arkeo.Provider.min_contract_duration":
		panic(fmt.Errorf("field min_contract_duration of message arkeo.arkeo.Provider is not mutable"))
	case "arkeo.arkeo.Provider.max_contract_duration":
		panic(fmt.Errorf("field max_contract_duration of message arkeo.arkeo.Provider is not mutable"))
	case "arkeo.arkeo.Provider.bond":
		panic(fmt.Errorf("field bond of message arkeo.arkeo.Provider is not mutable"))
	case "arkeo.arkeo.Provider.last_update":
		panic(fmt.Errorf("field last_update of message arkeo.arkeo.Provider is not mutable"))
	case "arkeo.arkeo.Provider.settlement_duration":
		panic(fmt.Errorf("field settlement_duration of message arkeo.arkeo.Provider is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Provider"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Provider does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Provider) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.Provider.pub_key":
		return protoreflect.ValueOfBytes(nil)
	case "arkeo.arkeo.Provider.service":
		return protoreflect.ValueOfInt32(int32(0))
	case "arkeo.arkeo.Provider.metadata_uri":
		return protoreflect.ValueOfString("")
	case "arkeo.arkeo.Provider.metadata_nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "arkeo.arkeo.Provider.status":
		return protoreflect.ValueOfEnum(0)
	case "arkeo.arkeo.Provider.min_contract_duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "arkeo.arkeo.Provider.max_contract_duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "arkeo.arkeo.Provider.subscription_rate":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Provider_8_list{list: &list})
	case "arkeo.arkeo.Provider.pay_as_you_go_rate":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Provider_9_list{list: &list})
	case "arkeo.arkeo.Provider.bond":
		return protoreflect.ValueOfString("")
	case "arkeo.arkeo.Provider.last_update":
		return protoreflect.ValueOfInt64(int64(0))
	case "arkeo.arkeo.Provider.settlement_duration":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Provider"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Provider does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Provider) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in arkeo.arkeo.Provider", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Provider) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Provider) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Provider) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Provider) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Provider)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.PubKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Service != 0 {
			n += 1 + runtime.Sov(uint64(x.Service))
		}
		l = len(x.MetadataUri)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MetadataNonce != 0 {
			n += 1 + runtime.Sov(uint64(x.MetadataNonce))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.MinContractDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.MinContractDuration))
		}
		if x.MaxContractDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxContractDuration))
		}
		if len(x.SubscriptionRate) > 0 {
			for _, e := range x.SubscriptionRate {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PayAsYouGoRate) > 0 {
			for _, e := range x.PayAsYouGoRate {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Bond)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastUpdate != 0 {
			n += 1 + runtime.Sov(uint64(x.LastUpdate))
		}
		if x.SettlementDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.SettlementDuration))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Provider)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SettlementDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SettlementDuration))
			i--
			dAtA[i] = 0x60
		}
		if x.LastUpdate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastUpdate))
			i--
			dAtA[i] = 0x58
		}
		if len(x.Bond) > 0 {
			i -= len(x.Bond)
			copy(dAtA[i:], x.Bond)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Bond)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.PayAsYouGoRate) > 0 {
			for iNdEx := len(x.PayAsYouGoRate) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PayAsYouGoRate[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.SubscriptionRate) > 0 {
			for iNdEx := len(x.SubscriptionRate) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SubscriptionRate[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if x.MaxContractDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxContractDuration))
			i--
			dAtA[i] = 0x38
		}
		if x.MinContractDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinContractDuration))
			i--
			dAtA[i] = 0x30
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x28
		}
		if x.MetadataNonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MetadataNonce))
			i--
			dAtA[i] = 0x20
		}
		if len(x.MetadataUri) > 0 {
			i -= len(x.MetadataUri)
			copy(dAtA[i:], x.MetadataUri)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MetadataUri)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Service != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Service))
			i--
			dAtA[i] = 0x10
		}
		if len(x.PubKey) > 0 {
			i -= len(x.PubKey)
			copy(dAtA[i:], x.PubKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PubKey)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Provider)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Provider: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PubKey = append(x.PubKey[:0], dAtA[iNdEx:postIndex]...)
				if x.PubKey == nil {
					x.PubKey = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
				}
				x.Service = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Service |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MetadataUri = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MetadataNonce", wireType)
				}
				x.MetadataNonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MetadataNonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= ProviderStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinContractDuration", wireType)
				}
				x.MinContractDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinContractDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxContractDuration", wireType)
				}
				x.MaxContractDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxContractDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SubscriptionRate = append(x.SubscriptionRate, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SubscriptionRate[len(x.SubscriptionRate)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PayAsYouGoRate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PayAsYouGoRate = append(x.PayAsYouGoRate, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PayAsYouGoRate[len(x.PayAsYouGoRate)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Bond = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
				}
				x.LastUpdate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastUpdate |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SettlementDuration", wireType)
				}
				x.SettlementDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SettlementDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Contract                     protoreflect.MessageDescriptor
	fd_Contract_provider            protoreflect.FieldDescriptor
	fd_Contract_service             protoreflect.FieldDescriptor
	fd_Contract_client              protoreflect.FieldDescriptor
	fd_Contract_delegate            protoreflect.FieldDescriptor
	fd_Contract_type                protoreflect.FieldDescriptor
	fd_Contract_height              protoreflect.FieldDescriptor
	fd_Contract_duration            protoreflect.FieldDescriptor
	fd_Contract_rate                protoreflect.FieldDescriptor
	fd_Contract_deposit             protoreflect.FieldDescriptor
	fd_Contract_paid                protoreflect.FieldDescriptor
	fd_Contract_nonce               protoreflect.FieldDescriptor
	fd_Contract_settlement_height   protoreflect.FieldDescriptor
	fd_Contract_id                  protoreflect.FieldDescriptor
	fd_Contract_settlement_duration protoreflect.FieldDescriptor
	fd_Contract_authorization       protoreflect.FieldDescriptor
	fd_Contract_queries_per_minute  protoreflect.FieldDescriptor
)

func init() {
	file_arkeo_arkeo_keeper_proto_init()
	md_Contract = File_arkeo_arkeo_keeper_proto.Messages().ByName("Contract")
	fd_Contract_provider = md_Contract.Fields().ByName("provider")
	fd_Contract_service = md_Contract.Fields().ByName("service")
	fd_Contract_client = md_Contract.Fields().ByName("client")
	fd_Contract_delegate = md_Contract.Fields().ByName("delegate")
	fd_Contract_type = md_Contract.Fields().ByName("type")
	fd_Contract_height = md_Contract.Fields().ByName("height")
	fd_Contract_duration = md_Contract.Fields().ByName("duration")
	fd_Contract_rate = md_Contract.Fields().ByName("rate")
	fd_Contract_deposit = md_Contract.Fields().ByName("deposit")
	fd_Contract_paid = md_Contract.Fields().ByName("paid")
	fd_Contract_nonce = md_Contract.Fields().ByName("nonce")
	fd_Contract_settlement_height = md_Contract.Fields().ByName("settlement_height")
	fd_Contract_id = md_Contract.Fields().ByName("id")
	fd_Contract_settlement_duration = md_Contract.Fields().ByName("settlement_duration")
	fd_Contract_authorization = md_Contract.Fields().ByName("authorization")
	fd_Contract_queries_per_minute = md_Contract.Fields().ByName("queries_per_minute")
}

var _ protoreflect.Message = (*fastReflection_Contract)(nil)

type fastReflection_Contract Contract

func (x *Contract) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Contract)(x)
}

func (x *Contract) slowProtoReflect() protoreflect.Message {
	mi := &file_arkeo_arkeo_keeper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Contract_messageType fastReflection_Contract_messageType
var _ protoreflect.MessageType = fastReflection_Contract_messageType{}

type fastReflection_Contract_messageType struct{}

func (x fastReflection_Contract_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Contract)(nil)
}
func (x fastReflection_Contract_messageType) New() protoreflect.Message {
	return new(fastReflection_Contract)
}
func (x fastReflection_Contract_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Contract
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Contract) Descriptor() protoreflect.MessageDescriptor {
	return md_Contract
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Contract) Type() protoreflect.MessageType {
	return _fastReflection_Contract_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Contract) New() protoreflect.Message {
	return new(fastReflection_Contract)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Contract) Interface() protoreflect.ProtoMessage {
	return (*Contract)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Contract) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Provider) != 0 {
		value := protoreflect.ValueOfBytes(x.Provider)
		if !f(fd_Contract_provider, value) {
			return
		}
	}
	if x.Service != int32(0) {
		value := protoreflect.ValueOfInt32(x.Service)
		if !f(fd_Contract_service, value) {
			return
		}
	}
	if len(x.Client) != 0 {
		value := protoreflect.ValueOfBytes(x.Client)
		if !f(fd_Contract_client, value) {
			return
		}
	}
	if len(x.Delegate) != 0 {
		value := protoreflect.ValueOfBytes(x.Delegate)
		if !f(fd_Contract_delegate, value) {
			return
		}
	}
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_Contract_type, value) {
			return
		}
	}
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_Contract_height, value) {
			return
		}
	}
	if x.Duration != int64(0) {
		value := protoreflect.ValueOfInt64(x.Duration)
		if !f(fd_Contract_duration, value) {
			return
		}
	}
	if x.Rate != nil {
		value := protoreflect.ValueOfMessage(x.Rate.ProtoReflect())
		if !f(fd_Contract_rate, value) {
			return
		}
	}
	if x.Deposit != "" {
		value := protoreflect.ValueOfString(x.Deposit)
		if !f(fd_Contract_deposit, value) {
			return
		}
	}
	if x.Paid != "" {
		value := protoreflect.ValueOfString(x.Paid)
		if !f(fd_Contract_paid, value) {
			return
		}
	}
	if x.Nonce != int64(0) {
		value := protoreflect.ValueOfInt64(x.Nonce)
		if !f(fd_Contract_nonce, value) {
			return
		}
	}
	if x.SettlementHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.SettlementHeight)
		if !f(fd_Contract_settlement_height, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Contract_id, value) {
			return
		}
	}
	if x.SettlementDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.SettlementDuration)
		if !f(fd_Contract_settlement_duration, value) {
			return
		}
	}
	if x.Authorization != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Authorization))
		if !f(fd_Contract_authorization, value) {
			return
		}
	}
	if x.QueriesPerMinute != int64(0) {
		value := protoreflect.ValueOfInt64(x.QueriesPerMinute)
		if !f(fd_Contract_queries_per_minute, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Contract) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "arkeo.arkeo.Contract.provider":
		return len(x.Provider) != 0
	case "arkeo.arkeo.Contract.service":
		return x.Service != int32(0)
	case "arkeo.arkeo.Contract.client":
		return len(x.Client) != 0
	case "arkeo.arkeo.Contract.delegate":
		return len(x.Delegate) != 0
	case "arkeo.arkeo.Contract.type":
		return x.Type_ != 0
	case "arkeo.arkeo.Contract.height":
		return x.Height != int64(0)
	case "arkeo.arkeo.Contract.duration":
		return x.Duration != int64(0)
	case "arkeo.arkeo.Contract.rate":
		return x.Rate != nil
	case "arkeo.arkeo.Contract.deposit":
		return x.Deposit != ""
	case "arkeo.arkeo.Contract.paid":
		return x.Paid != ""
	case "arkeo.arkeo.Contract.nonce":
		return x.Nonce != int64(0)
	case "arkeo.arkeo.Contract.settlement_height":
		return x.SettlementHeight != int64(0)
	case "arkeo.arkeo.Contract.id":
		return x.Id != uint64(0)
	case "arkeo.arkeo.Contract.settlement_duration":
		return x.SettlementDuration != int64(0)
	case "arkeo.arkeo.Contract.authorization":
		return x.Authorization != 0
	case "arkeo.arkeo.Contract.queries_per_minute":
		return x.QueriesPerMinute != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Contract"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Contract does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Contract) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "arkeo.arkeo.Contract.provider":
		x.Provider = nil
	case "arkeo.arkeo.Contract.service":
		x.Service = int32(0)
	case "arkeo.arkeo.Contract.client":
		x.Client = nil
	case "arkeo.arkeo.Contract.delegate":
		x.Delegate = nil
	case "arkeo.arkeo.Contract.type":
		x.Type_ = 0
	case "arkeo.arkeo.Contract.height":
		x.Height = int64(0)
	case "arkeo.arkeo.Contract.duration":
		x.Duration = int64(0)
	case "arkeo.arkeo.Contract.rate":
		x.Rate = nil
	case "arkeo.arkeo.Contract.deposit":
		x.Deposit = ""
	case "arkeo.arkeo.Contract.paid":
		x.Paid = ""
	case "arkeo.arkeo.Contract.nonce":
		x.Nonce = int64(0)
	case "arkeo.arkeo.Contract.settlement_height":
		x.SettlementHeight = int64(0)
	case "arkeo.arkeo.Contract.id":
		x.Id = uint64(0)
	case "arkeo.arkeo.Contract.settlement_duration":
		x.SettlementDuration = int64(0)
	case "arkeo.arkeo.Contract.authorization":
		x.Authorization = 0
	case "arkeo.arkeo.Contract.queries_per_minute":
		x.QueriesPerMinute = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Contract"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Contract does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Contract) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "arkeo.arkeo.Contract.provider":
		value := x.Provider
		return protoreflect.ValueOfBytes(value)
	case "arkeo.arkeo.Contract.service":
		value := x.Service
		return protoreflect.ValueOfInt32(value)
	case "arkeo.arkeo.Contract.client":
		value := x.Client
		return protoreflect.ValueOfBytes(value)
	case "arkeo.arkeo.Contract.delegate":
		value := x.Delegate
		return protoreflect.ValueOfBytes(value)
	case "arkeo.arkeo.Contract.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "arkeo.arkeo.Contract.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	case "arkeo.arkeo.Contract.duration":
		value := x.Duration
		return protoreflect.ValueOfInt64(value)
	case "arkeo.arkeo.Contract.rate":
		value := x.Rate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "arkeo.arkeo.Contract.deposit":
		value := x.Deposit
		return protoreflect.ValueOfString(value)
	case "arkeo.arkeo.Contract.paid":
		value := x.Paid
		return protoreflect.ValueOfString(value)
	case "arkeo.arkeo.Contract.nonce":
		value := x.Nonce
		return protoreflect.ValueOfInt64(value)
	case "arkeo.arkeo.Contract.settlement_height":
		value := x.SettlementHeight
		return protoreflect.ValueOfInt64(value)
	case "arkeo.arkeo.Contract.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "arkeo.arkeo.Contract.settlement_duration":
		value := x.SettlementDuration
		return protoreflect.ValueOfInt64(value)
	case "arkeo.arkeo.Contract.authorization":
		value := x.Authorization
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "arkeo.arkeo.Contract.queries_per_minute":
		value := x.QueriesPerMinute
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Contract"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Contract does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Contract) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "arkeo.arkeo.Contract.provider":
		x.Provider = value.Bytes()
	case "arkeo.arkeo.Contract.service":
		x.Service = int32(value.Int())
	case "arkeo.arkeo.Contract.client":
		x.Client = value.Bytes()
	case "arkeo.arkeo.Contract.delegate":
		x.Delegate = value.Bytes()
	case "arkeo.arkeo.Contract.type":
		x.Type_ = (ContractType)(value.Enum())
	case "arkeo.arkeo.Contract.height":
		x.Height = value.Int()
	case "arkeo.arkeo.Contract.duration":
		x.Duration = value.Int()
	case "arkeo.arkeo.Contract.rate":
		x.Rate = value.Message().Interface().(*v1beta1.Coin)
	case "arkeo.arkeo.Contract.deposit":
		x.Deposit = value.Interface().(string)
	case "arkeo.arkeo.Contract.paid":
		x.Paid = value.Interface().(string)
	case "arkeo.arkeo.Contract.nonce":
		x.Nonce = value.Int()
	case "arkeo.arkeo.Contract.settlement_height":
		x.SettlementHeight = value.Int()
	case "arkeo.arkeo.Contract.id":
		x.Id = value.Uint()
	case "arkeo.arkeo.Contract.settlement_duration":
		x.SettlementDuration = value.Int()
	case "arkeo.arkeo.Contract.authorization":
		x.Authorization = (ContractAuthorization)(value.Enum())
	case "arkeo.arkeo.Contract.queries_per_minute":
		x.QueriesPerMinute = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Contract"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Contract does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Contract) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.Contract.rate":
		if x.Rate == nil {
			x.Rate = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Rate.ProtoReflect())
	case "arkeo.arkeo.Contract.provider":
		panic(fmt.Errorf("field provider of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.service":
		panic(fmt.Errorf("field service of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.client":
		panic(fmt.Errorf("field client of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.delegate":
		panic(fmt.Errorf("field delegate of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.type":
		panic(fmt.Errorf("field type of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.height":
		panic(fmt.Errorf("field height of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.duration":
		panic(fmt.Errorf("field duration of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.deposit":
		panic(fmt.Errorf("field deposit of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.paid":
		panic(fmt.Errorf("field paid of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.nonce":
		panic(fmt.Errorf("field nonce of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.settlement_height":
		panic(fmt.Errorf("field settlement_height of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.id":
		panic(fmt.Errorf("field id of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.settlement_duration":
		panic(fmt.Errorf("field settlement_duration of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.authorization":
		panic(fmt.Errorf("field authorization of message arkeo.arkeo.Contract is not mutable"))
	case "arkeo.arkeo.Contract.queries_per_minute":
		panic(fmt.Errorf("field queries_per_minute of message arkeo.arkeo.Contract is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Contract"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Contract does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Contract) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.Contract.provider":
		return protoreflect.ValueOfBytes(nil)
	case "arkeo.arkeo.Contract.service":
		return protoreflect.ValueOfInt32(int32(0))
	case "arkeo.arkeo.Contract.client":
		return protoreflect.ValueOfBytes(nil)
	case "arkeo.arkeo.Contract.delegate":
		return protoreflect.ValueOfBytes(nil)
	case "arkeo.arkeo.Contract.type":
		return protoreflect.ValueOfEnum(0)
	case "arkeo.arkeo.Contract.height":
		return protoreflect.ValueOfInt64(int64(0))
	case "arkeo.arkeo.Contract.duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "arkeo.arkeo.Contract.rate":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "arkeo.arkeo.Contract.deposit":
		return protoreflect.ValueOfString("")
	case "arkeo.arkeo.Contract.paid":
		return protoreflect.ValueOfString("")
	case "arkeo.arkeo.Contract.nonce":
		return protoreflect.ValueOfInt64(int64(0))
	case "arkeo.arkeo.Contract.settlement_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "arkeo.arkeo.Contract.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "arkeo.arkeo.Contract.settlement_duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "arkeo.arkeo.Contract.authorization":
		return protoreflect.ValueOfEnum(0)
	case "arkeo.arkeo.Contract.queries_per_minute":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.Contract"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.Contract does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Contract) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in arkeo.arkeo.Contract", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Contract) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Contract) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Contract) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Contract) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Contract)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Provider)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Service != 0 {
			n += 1 + runtime.Sov(uint64(x.Service))
		}
		l = len(x.Client)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Delegate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.Duration != 0 {
			n += 1 + runtime.Sov(uint64(x.Duration))
		}
		if x.Rate != nil {
			l = options.Size(x.Rate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Deposit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Paid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		if x.SettlementHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.SettlementHeight))
		}
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.SettlementDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.SettlementDuration))
		}
		if x.Authorization != 0 {
			n += 1 + runtime.Sov(uint64(x.Authorization))
		}
		if x.QueriesPerMinute != 0 {
			n += 2 + runtime.Sov(uint64(x.QueriesPerMinute))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Contract)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.QueriesPerMinute != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.QueriesPerMinute))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.Authorization != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Authorization))
			i--
			dAtA[i] = 0x78
		}
		if x.SettlementDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SettlementDuration))
			i--
			dAtA[i] = 0x70
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x68
		}
		if x.SettlementHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SettlementHeight))
			i--
			dAtA[i] = 0x60
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x58
		}
		if len(x.Paid) > 0 {
			i -= len(x.Paid)
			copy(dAtA[i:], x.Paid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Paid)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.Deposit) > 0 {
			i -= len(x.Deposit)
			copy(dAtA[i:], x.Deposit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Deposit)))
			i--
			dAtA[i] = 0x4a
		}
		if x.Rate != nil {
			encoded, err := options.Marshal(x.Rate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if x.Duration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Duration))
			i--
			dAtA[i] = 0x38
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x30
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Delegate) > 0 {
			i -= len(x.Delegate)
			copy(dAtA[i:], x.Delegate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Delegate)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Client) > 0 {
			i -= len(x.Client)
			copy(dAtA[i:], x.Client)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Client)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Service != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Service))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Provider) > 0 {
			i -= len(x.Provider)
			copy(dAtA[i:], x.Provider)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Provider)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Contract)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Contract: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Provider = append(x.Provider[:0], dAtA[iNdEx:postIndex]...)
				if x.Provider == nil {
					x.Provider = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
				}
				x.Service = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Service |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Client = append(x.Client[:0], dAtA[iNdEx:postIndex]...)
				if x.Client == nil {
					x.Client = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Delegate = append(x.Delegate[:0], dAtA[iNdEx:postIndex]...)
				if x.Delegate == nil {
					x.Delegate = []byte{}
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= ContractType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
				}
				x.Duration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Duration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Rate == nil {
					x.Rate = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Rate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Deposit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Paid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SettlementHeight", wireType)
				}
				x.SettlementHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SettlementHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SettlementDuration", wireType)
				}
				x.SettlementDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SettlementDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Authorization", wireType)
				}
				x.Authorization = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Authorization |= ContractAuthorization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QueriesPerMinute", wireType)
				}
				x.QueriesPerMinute = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.QueriesPerMinute |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ContractSet_1_list)(nil)

type _ContractSet_1_list struct {
	list *[]uint64
}

func (x *_ContractSet_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ContractSet_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_ContractSet_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ContractSet_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ContractSet_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ContractSet at list field ContractIds as it is not of Message kind"))
}

func (x *_ContractSet_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ContractSet_1_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_ContractSet_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ContractSet              protoreflect.MessageDescriptor
	fd_ContractSet_contract_ids protoreflect.FieldDescriptor
)

func init() {
	file_arkeo_arkeo_keeper_proto_init()
	md_ContractSet = File_arkeo_arkeo_keeper_proto.Messages().ByName("ContractSet")
	fd_ContractSet_contract_ids = md_ContractSet.Fields().ByName("contract_ids")
}

var _ protoreflect.Message = (*fastReflection_ContractSet)(nil)

type fastReflection_ContractSet ContractSet

func (x *ContractSet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ContractSet)(x)
}

func (x *ContractSet) slowProtoReflect() protoreflect.Message {
	mi := &file_arkeo_arkeo_keeper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ContractSet_messageType fastReflection_ContractSet_messageType
var _ protoreflect.MessageType = fastReflection_ContractSet_messageType{}

type fastReflection_ContractSet_messageType struct{}

func (x fastReflection_ContractSet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ContractSet)(nil)
}
func (x fastReflection_ContractSet_messageType) New() protoreflect.Message {
	return new(fastReflection_ContractSet)
}
func (x fastReflection_ContractSet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ContractSet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ContractSet) Descriptor() protoreflect.MessageDescriptor {
	return md_ContractSet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ContractSet) Type() protoreflect.MessageType {
	return _fastReflection_ContractSet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ContractSet) New() protoreflect.Message {
	return new(fastReflection_ContractSet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ContractSet) Interface() protoreflect.ProtoMessage {
	return (*ContractSet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ContractSet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.ContractIds) != 0 {
		value := protoreflect.ValueOfList(&_ContractSet_1_list{list: &x.ContractIds})
		if !f(fd_ContractSet_contract_ids, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ContractSet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractSet.contract_ids":
		return len(x.ContractIds) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractSet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ContractSet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractSet.contract_ids":
		x.ContractIds = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractSet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ContractSet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "arkeo.arkeo.ContractSet.contract_ids":
		if len(x.ContractIds) == 0 {
			return protoreflect.ValueOfList(&_ContractSet_1_list{})
		}
		listValue := &_ContractSet_1_list{list: &x.ContractIds}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractSet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ContractSet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractSet.contract_ids":
		lv := value.List()
		clv := lv.(*_ContractSet_1_list)
		x.ContractIds = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractSet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ContractSet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractSet.contract_ids":
		if x.ContractIds == nil {
			x.ContractIds = []uint64{}
		}
		value := &_ContractSet_1_list{list: &x.ContractIds}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractSet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ContractSet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractSet.contract_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_ContractSet_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractSet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ContractSet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in arkeo.arkeo.ContractSet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ContractSet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ContractSet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ContractSet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ContractSet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ContractSet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.ContractIds) > 0 {
			l = 0
			for _, e := range x.ContractIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ContractSet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ContractIds) > 0 {
			var pksize2 int
			for _, num := range x.ContractIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.ContractIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ContractSet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ContractSet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ContractSet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ContractIds = append(x.ContractIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.ContractIds) == 0 {
						x.ContractIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ContractIds = append(x.ContractIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractIds", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ContractExpirationSet              protoreflect.MessageDescriptor
	fd_ContractExpirationSet_height       protoreflect.FieldDescriptor
	fd_ContractExpirationSet_contract_set protoreflect.FieldDescriptor
)

func init() {
	file_arkeo_arkeo_keeper_proto_init()
	md_ContractExpirationSet = File_arkeo_arkeo_keeper_proto.Messages().ByName("ContractExpirationSet")
	fd_ContractExpirationSet_height = md_ContractExpirationSet.Fields().ByName("height")
	fd_ContractExpirationSet_contract_set = md_ContractExpirationSet.Fields().ByName("contract_set")
}

var _ protoreflect.Message = (*fastReflection_ContractExpirationSet)(nil)

type fastReflection_ContractExpirationSet ContractExpirationSet

func (x *ContractExpirationSet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ContractExpirationSet)(x)
}

func (x *ContractExpirationSet) slowProtoReflect() protoreflect.Message {
	mi := &file_arkeo_arkeo_keeper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ContractExpirationSet_messageType fastReflection_ContractExpirationSet_messageType
var _ protoreflect.MessageType = fastReflection_ContractExpirationSet_messageType{}

type fastReflection_ContractExpirationSet_messageType struct{}

func (x fastReflection_ContractExpirationSet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ContractExpirationSet)(nil)
}
func (x fastReflection_ContractExpirationSet_messageType) New() protoreflect.Message {
	return new(fastReflection_ContractExpirationSet)
}
func (x fastReflection_ContractExpirationSet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ContractExpirationSet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ContractExpirationSet) Descriptor() protoreflect.MessageDescriptor {
	return md_ContractExpirationSet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ContractExpirationSet) Type() protoreflect.MessageType {
	return _fastReflection_ContractExpirationSet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ContractExpirationSet) New() protoreflect.Message {
	return new(fastReflection_ContractExpirationSet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ContractExpirationSet) Interface() protoreflect.ProtoMessage {
	return (*ContractExpirationSet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ContractExpirationSet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_ContractExpirationSet_height, value) {
			return
		}
	}
	if x.ContractSet != nil {
		value := protoreflect.ValueOfMessage(x.ContractSet.ProtoReflect())
		if !f(fd_ContractExpirationSet_contract_set, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ContractExpirationSet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractExpirationSet.height":
		return x.Height != int64(0)
	case "arkeo.arkeo.ContractExpirationSet.contract_set":
		return x.ContractSet != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractExpirationSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractExpirationSet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ContractExpirationSet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractExpirationSet.height":
		x.Height = int64(0)
	case "arkeo.arkeo.ContractExpirationSet.contract_set":
		x.ContractSet = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractExpirationSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractExpirationSet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ContractExpirationSet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "arkeo.arkeo.ContractExpirationSet.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	case "arkeo.arkeo.ContractExpirationSet.contract_set":
		value := x.ContractSet
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractExpirationSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractExpirationSet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ContractExpirationSet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractExpirationSet.height":
		x.Height = value.Int()
	case "arkeo.arkeo.ContractExpirationSet.contract_set":
		x.ContractSet = value.Message().Interface().(*ContractSet)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractExpirationSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractExpirationSet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ContractExpirationSet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractExpirationSet.contract_set":
		if x.ContractSet == nil {
			x.ContractSet = new(ContractSet)
		}
		return protoreflect.ValueOfMessage(x.ContractSet.ProtoReflect())
	case "arkeo.arkeo.ContractExpirationSet.height":
		panic(fmt.Errorf("field height of message arkeo.arkeo.ContractExpirationSet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractExpirationSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractExpirationSet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ContractExpirationSet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.ContractExpirationSet.height":
		return protoreflect.ValueOfInt64(int64(0))
	case "arkeo.arkeo.ContractExpirationSet.contract_set":
		m := new(ContractSet)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.ContractExpirationSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.ContractExpirationSet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ContractExpirationSet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in arkeo.arkeo.ContractExpirationSet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ContractExpirationSet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ContractExpirationSet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ContractExpirationSet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ContractExpirationSet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ContractExpirationSet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.ContractSet != nil {
			l = options.Size(x.ContractSet)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ContractExpirationSet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ContractSet != nil {
			encoded, err := options.Marshal(x.ContractSet)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ContractExpirationSet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ContractExpirationSet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ContractExpirationSet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractSet", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ContractSet == nil {
					x.ContractSet = &ContractSet{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ContractSet); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_UserContractSet              protoreflect.MessageDescriptor
	fd_UserContractSet_user         protoreflect.FieldDescriptor
	fd_UserContractSet_contract_set protoreflect.FieldDescriptor
)

func init() {
	file_arkeo_arkeo_keeper_proto_init()
	md_UserContractSet = File_arkeo_arkeo_keeper_proto.Messages().ByName("UserContractSet")
	fd_UserContractSet_user = md_UserContractSet.Fields().ByName("user")
	fd_UserContractSet_contract_set = md_UserContractSet.Fields().ByName("contract_set")
}

var _ protoreflect.Message = (*fastReflection_UserContractSet)(nil)

type fastReflection_UserContractSet UserContractSet

func (x *UserContractSet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UserContractSet)(x)
}

func (x *UserContractSet) slowProtoReflect() protoreflect.Message {
	mi := &file_arkeo_arkeo_keeper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UserContractSet_messageType fastReflection_UserContractSet_messageType
var _ protoreflect.MessageType = fastReflection_UserContractSet_messageType{}

type fastReflection_UserContractSet_messageType struct{}

func (x fastReflection_UserContractSet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UserContractSet)(nil)
}
func (x fastReflection_UserContractSet_messageType) New() protoreflect.Message {
	return new(fastReflection_UserContractSet)
}
func (x fastReflection_UserContractSet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UserContractSet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UserContractSet) Descriptor() protoreflect.MessageDescriptor {
	return md_UserContractSet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UserContractSet) Type() protoreflect.MessageType {
	return _fastReflection_UserContractSet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UserContractSet) New() protoreflect.Message {
	return new(fastReflection_UserContractSet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UserContractSet) Interface() protoreflect.ProtoMessage {
	return (*UserContractSet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UserContractSet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.User) != 0 {
		value := protoreflect.ValueOfBytes(x.User)
		if !f(fd_UserContractSet_user, value) {
			return
		}
	}
	if x.ContractSet != nil {
		value := protoreflect.ValueOfMessage(x.ContractSet.ProtoReflect())
		if !f(fd_UserContractSet_contract_set, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UserContractSet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "arkeo.arkeo.UserContractSet.user":
		return len(x.User) != 0
	case "arkeo.arkeo.UserContractSet.contract_set":
		return x.ContractSet != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.UserContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.UserContractSet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserContractSet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "arkeo.arkeo.UserContractSet.user":
		x.User = nil
	case "arkeo.arkeo.UserContractSet.contract_set":
		x.ContractSet = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.UserContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.UserContractSet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UserContractSet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "arkeo.arkeo.UserContractSet.user":
		value := x.User
		return protoreflect.ValueOfBytes(value)
	case "arkeo.arkeo.UserContractSet.contract_set":
		value := x.ContractSet
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.UserContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.UserContractSet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserContractSet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "arkeo.arkeo.UserContractSet.user":
		x.User = value.Bytes()
	case "arkeo.arkeo.UserContractSet.contract_set":
		x.ContractSet = value.Message().Interface().(*ContractSet)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.UserContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.UserContractSet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserContractSet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.UserContractSet.contract_set":
		if x.ContractSet == nil {
			x.ContractSet = new(ContractSet)
		}
		return protoreflect.ValueOfMessage(x.ContractSet.ProtoReflect())
	case "arkeo.arkeo.UserContractSet.user":
		panic(fmt.Errorf("field user of message arkeo.arkeo.UserContractSet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.UserContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.UserContractSet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UserContractSet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.arkeo.UserContractSet.user":
		return protoreflect.ValueOfBytes(nil)
	case "arkeo.arkeo.UserContractSet.contract_set":
		m := new(ContractSet)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.arkeo.UserContractSet"))
		}
		panic(fmt.Errorf("message arkeo.arkeo.UserContractSet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UserContractSet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in arkeo.arkeo.UserContractSet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UserContractSet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserContractSet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UserContractSet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UserContractSet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UserContractSet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.User)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ContractSet != nil {
			l = options.Size(x.ContractSet)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UserContractSet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ContractSet != nil {
			encoded, err := options.Marshal(x.ContractSet)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.User) > 0 {
			i -= len(x.User)
			copy(dAtA[i:], x.User)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.User)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UserContractSet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserContractSet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserContractSet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.User = append(x.User[:0], dAtA[iNdEx:postIndex]...)
				if x.User == nil {
					x.User = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractSet", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ContractSet == nil {
					x.ContractSet = &ContractSet{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ContractSet); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: arkeo/arkeo/keeper.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProviderStatus int32

const (
	ProviderStatus_OFFLINE ProviderStatus = 0
	ProviderStatus_ONLINE  ProviderStatus = 1
)

// Enum value maps for ProviderStatus.
var (
	ProviderStatus_name = map[int32]string{
		0: "OFFLINE",
		1: "ONLINE",
	}
	ProviderStatus_value = map[string]int32{
		"OFFLINE": 0,
		"ONLINE":  1,
	}
)

func (x ProviderStatus) Enum() *ProviderStatus {
	p := new(ProviderStatus)
	*p = x
	return p
}

func (x ProviderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_arkeo_arkeo_keeper_proto_enumTypes[0].Descriptor()
}

func (ProviderStatus) Type() protoreflect.EnumType {
	return &file_arkeo_arkeo_keeper_proto_enumTypes[0]
}

func (x ProviderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderStatus.Descriptor instead.
func (ProviderStatus) EnumDescriptor() ([]byte, []int) {
	return file_arkeo_arkeo_keeper_proto_rawDescGZIP(), []int{0}
}

type ContractType int32

const (
	ContractType_SUBSCRIPTION  ContractType = 0
	ContractType_PAY_AS_YOU_GO ContractType = 1
)

// Enum value maps for ContractType.
var (
	ContractType_name = map[int32]string{
		0: "SUBSCRIPTION",
		1: "PAY_AS_YOU_GO",
	}
	ContractType_value = map[string]int32{
		"SUBSCRIPTION":  0,
		"PAY_AS_YOU_GO": 1,
	}
)

func (x ContractType) Enum() *ContractType {
	p := new(ContractType)
	*p = x
	return p
}

func (x ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_arkeo_arkeo_keeper_proto_enumTypes[1].Descriptor()
}

func (ContractType) Type() protoreflect.EnumType {
	return &file_arkeo_arkeo_keeper_proto_enumTypes[1]
}

func (x ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractType.Descriptor instead.
func (ContractType) EnumDescriptor() ([]byte, []int) {
	return file_arkeo_arkeo_keeper_proto_rawDescGZIP(), []int{1}
}

type ContractAuthorization int32

const (
	ContractAuthorization_STRICT ContractAuthorization = 0
	ContractAuthorization_OPEN   ContractAuthorization = 1
)

// Enum value maps for ContractAuthorization.
var (
	ContractAuthorization_name = map[int32]string{
		0: "STRICT",
		1: "OPEN",
	}
	ContractAuthorization_value = map[string]int32{
		"STRICT": 0,
		"OPEN":   1,
	}
)

func (x ContractAuthorization) Enum() *ContractAuthorization {
	p := new(ContractAuthorization)
	*p = x
	return p
}

func (x ContractAuthorization) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractAuthorization) Descriptor() protoreflect.EnumDescriptor {
	return file_arkeo_arkeo_keeper_proto_enumTypes[2].Descriptor()
}

func (ContractAuthorization) Type() protoreflect.EnumType {
	return &file_arkeo_arkeo_keeper_proto_enumTypes[2]
}

func (x ContractAuthorization) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractAuthorization.Descriptor instead.
func (ContractAuthorization) EnumDescriptor() ([]byte, []int) {
	return file_arkeo_arkeo_keeper_proto_rawDescGZIP(), []int{2}
}

type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey              []byte          `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Service             int32           `protobuf:"varint,2,opt,name=service,proto3" json:"service,omitempty"`
	MetadataUri         string          `protobuf:"bytes,3,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	MetadataNonce       uint64          `protobuf:"varint,4,opt,name=metadata_nonce,json=metadataNonce,proto3" json:"metadata_nonce,omitempty"`
	Status              ProviderStatus  `protobuf:"varint,5,opt,name=status,proto3,enum=arkeo.arkeo.ProviderStatus" json:"status,omitempty"`
	MinContractDuration int64           `protobuf:"varint,6,opt,name=min_contract_duration,json=minContractDuration,proto3" json:"min_contract_duration,omitempty"`
	MaxContractDuration int64           `protobuf:"varint,7,opt,name=max_contract_duration,json=maxContractDuration,proto3" json:"max_contract_duration,omitempty"`
	SubscriptionRate    []*v1beta1.Coin `protobuf:"bytes,8,rep,name=subscription_rate,json=subscriptionRate,proto3" json:"subscription_rate,omitempty"`
	PayAsYouGoRate      []*v1beta1.Coin `protobuf:"bytes,9,rep,name=pay_as_you_go_rate,json=payAsYouGoRate,proto3" json:"pay_as_you_go_rate,omitempty"`
	Bond                string          `protobuf:"bytes,10,opt,name=bond,proto3" json:"bond,omitempty"`
	LastUpdate          int64           `protobuf:"varint,11,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	SettlementDuration  int64           `protobuf:"varint,12,opt,name=settlement_duration,json=settlementDuration,proto3" json:"settlement_duration,omitempty"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arkeo_arkeo_keeper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_arkeo_arkeo_keeper_proto_rawDescGZIP(), []int{0}
}

func (x *Provider) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Provider) GetService() int32 {
	if x != nil {
		return x.Service
	}
	return 0
}

func (x *Provider) GetMetadataUri() string {
	if x != nil {
		return x.MetadataUri
	}
	return ""
}

func (x *Provider) GetMetadataNonce() uint64 {
	if x != nil {
		return x.MetadataNonce
	}
	return 0
}

func (x *Provider) GetStatus() ProviderStatus {
	if x != nil {
		return x.Status
	}
	return ProviderStatus_OFFLINE
}

func (x *Provider) GetMinContractDuration() int64 {
	if x != nil {
		return x.MinContractDuration
	}
	return 0
}

func (x *Provider) GetMaxContractDuration() int64 {
	if x != nil {
		return x.MaxContractDuration
	}
	return 0
}

func (x *Provider) GetSubscriptionRate() []*v1beta1.Coin {
	if x != nil {
		return x.SubscriptionRate
	}
	return nil
}

func (x *Provider) GetPayAsYouGoRate() []*v1beta1.Coin {
	if x != nil {
		return x.PayAsYouGoRate
	}
	return nil
}

func (x *Provider) GetBond() string {
	if x != nil {
		return x.Bond
	}
	return ""
}

func (x *Provider) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *Provider) GetSettlementDuration() int64 {
	if x != nil {
		return x.SettlementDuration
	}
	return 0
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider           []byte                `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Service            int32                 `protobuf:"varint,2,opt,name=service,proto3" json:"service,omitempty"`
	Client             []byte                `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	Delegate           []byte                `protobuf:"bytes,4,opt,name=delegate,proto3" json:"delegate,omitempty"`
	Type_              ContractType          `protobuf:"varint,5,opt,name=type,proto3,enum=arkeo.arkeo.ContractType" json:"type,omitempty"`
	Height             int64                 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Duration           int64                 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Rate               *v1beta1.Coin         `protobuf:"bytes,8,opt,name=rate,proto3" json:"rate,omitempty"`
	Deposit            string                `protobuf:"bytes,9,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Paid               string                `protobuf:"bytes,10,opt,name=paid,proto3" json:"paid,omitempty"`
	Nonce              int64                 `protobuf:"varint,11,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SettlementHeight   int64                 `protobuf:"varint,12,opt,name=settlement_height,json=settlementHeight,proto3" json:"settlement_height,omitempty"`
	Id                 uint64                `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
	SettlementDuration int64                 `protobuf:"varint,14,opt,name=settlement_duration,json=settlementDuration,proto3" json:"settlement_duration,omitempty"`
	Authorization      ContractAuthorization `protobuf:"varint,15,opt,name=authorization,proto3,enum=arkeo.arkeo.ContractAuthorization" json:"authorization,omitempty"`
	QueriesPerMinute   int64                 `protobuf:"varint,16,opt,name=queries_per_minute,json=queriesPerMinute,proto3" json:"queries_per_minute,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arkeo_arkeo_keeper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_arkeo_arkeo_keeper_proto_rawDescGZIP(), []int{1}
}

func (x *Contract) GetProvider() []byte {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Contract) GetService() int32 {
	if x != nil {
		return x.Service
	}
	return 0
}

func (x *Contract) GetClient() []byte {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *Contract) GetDelegate() []byte {
	if x != nil {
		return x.Delegate
	}
	return nil
}

func (x *Contract) GetType_() ContractType {
	if x != nil {
		return x.Type_
	}
	return ContractType_SUBSCRIPTION
}

func (x *Contract) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Contract) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Contract) GetRate() *v1beta1.Coin {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *Contract) GetDeposit() string {
	if x != nil {
		return x.Deposit
	}
	return ""
}

func (x *Contract) GetPaid() string {
	if x != nil {
		return x.Paid
	}
	return ""
}

func (x *Contract) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Contract) GetSettlementHeight() int64 {
	if x != nil {
		return x.SettlementHeight
	}
	return 0
}

func (x *Contract) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contract) GetSettlementDuration() int64 {
	if x != nil {
		return x.SettlementDuration
	}
	return 0
}

func (x *Contract) GetAuthorization() ContractAuthorization {
	if x != nil {
		return x.Authorization
	}
	return ContractAuthorization_STRICT
}

func (x *Contract) GetQueriesPerMinute() int64 {
	if x != nil {
		return x.QueriesPerMinute
	}
	return 0
}

type ContractSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractIds []uint64 `protobuf:"varint,1,rep,packed,name=contract_ids,json=contractIds,proto3" json:"contract_ids,omitempty"`
}

func (x *ContractSet) Reset() {
	*x = ContractSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arkeo_arkeo_keeper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSet) ProtoMessage() {}

// Deprecated: Use ContractSet.ProtoReflect.Descriptor instead.
func (*ContractSet) Descriptor() ([]byte, []int) {
	return file_arkeo_arkeo_keeper_proto_rawDescGZIP(), []int{2}
}

func (x *ContractSet) GetContractIds() []uint64 {
	if x != nil {
		return x.ContractIds
	}
	return nil
}

type ContractExpirationSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height      int64        `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	ContractSet *ContractSet `protobuf:"bytes,2,opt,name=contract_set,json=contractSet,proto3" json:"contract_set,omitempty"`
}

func (x *ContractExpirationSet) Reset() {
	*x = ContractExpirationSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arkeo_arkeo_keeper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractExpirationSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractExpirationSet) ProtoMessage() {}

// Deprecated: Use ContractExpirationSet.ProtoReflect.Descriptor instead.
func (*ContractExpirationSet) Descriptor() ([]byte, []int) {
	return file_arkeo_arkeo_keeper_proto_rawDescGZIP(), []int{3}
}

func (x *ContractExpirationSet) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ContractExpirationSet) GetContractSet() *ContractSet {
	if x != nil {
		return x.ContractSet
	}
	return nil
}

type UserContractSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        []byte       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	ContractSet *ContractSet `protobuf:"bytes,2,opt,name=contract_set,json=contractSet,proto3" json:"contract_set,omitempty"`
}

func (x *UserContractSet) Reset() {
	*x = UserContractSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arkeo_arkeo_keeper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContractSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContractSet) ProtoMessage() {}

// Deprecated: Use UserContractSet.ProtoReflect.Descriptor instead.
func (*UserContractSet) Descriptor() ([]byte, []int) {
	return file_arkeo_arkeo_keeper_proto_rawDescGZIP(), []int{4}
}

func (x *UserContractSet) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserContractSet) GetContractSet() *ContractSet {
	if x != nil {
		return x.ContractSet
	}
	return nil
}

var File_arkeo_arkeo_keeper_proto protoreflect.FileDescriptor

var file_arkeo_arkeo_keeper_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2f, 0x6b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x72, 0x6b, 0x65,
	0x6f, 0x2e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x05, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x2f, 0xfa, 0xde, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x4a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x30, 0xfa, 0xde, 0x1f, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x72,
	0x6b, 0x65, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x69, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e, 0x61, 0x72,
	0x6b, 0x65, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x4b, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x67,
	0x6f, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x70,
	0x61, 0x79, 0x41, 0x73, 0x59, 0x6f, 0x75, 0x47, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x04, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x6e, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xd5, 0x06, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4b, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x2f, 0xfa, 0xde, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x72, 0x6b, 0x65, 0x6f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x72, 0x6b,
	0x65, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x30, 0xfa, 0xde, 0x1f,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x65,
	0x6f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x2f, 0xfa, 0xde, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x4b, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x2f, 0xfa, 0xde, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61,
	0x72, 0x6b, 0x65, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x6b,
	0x65, 0x6f, 0x2e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e,
	0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x6c,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e, 0x61, 0x72,
	0x6b, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x22, 0x93, 0x01, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x12, 0x43, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x2f,
	0xfa, 0xde, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x72, 0x6b, 0x65, 0x6f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x72, 0x6b, 0x65,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72,
	0x6b, 0x65, 0x6f, 0x2e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x65, 0x74, 0x2a, 0x29, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x2a, 0x33, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x5f, 0x41, 0x53, 0x5f, 0x59, 0x4f, 0x55, 0x5f, 0x47, 0x4f,
	0x10, 0x01, 0x2a, 0x2d, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x01, 0x42, 0x89, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e,
	0x61, 0x72, 0x6b, 0x65, 0x6f, 0x42, 0x0b, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2f, 0x61, 0x72, 0x6b,
	0x65, 0x6f, 0xa2, 0x02, 0x03, 0x41, 0x41, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x72, 0x6b, 0x65, 0x6f,
	0x2e, 0x41, 0x72, 0x6b, 0x65, 0x6f, 0xca, 0x02, 0x0b, 0x41, 0x72, 0x6b, 0x65, 0x6f, 0x5c, 0x41,
	0x72, 0x6b, 0x65, 0x6f, 0xe2, 0x02, 0x17, 0x41, 0x72, 0x6b, 0x65, 0x6f, 0x5c, 0x41, 0x72, 0x6b,
	0x65, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0c, 0x41, 0x72, 0x6b, 0x65, 0x6f, 0x3a, 0x3a, 0x41, 0x72, 0x6b, 0x65, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arkeo_arkeo_keeper_proto_rawDescOnce sync.Once
	file_arkeo_arkeo_keeper_proto_rawDescData = file_arkeo_arkeo_keeper_proto_rawDesc
)

func file_arkeo_arkeo_keeper_proto_rawDescGZIP() []byte {
	file_arkeo_arkeo_keeper_proto_rawDescOnce.Do(func() {
		file_arkeo_arkeo_keeper_proto_rawDescData = protoimpl.X.CompressGZIP(file_arkeo_arkeo_keeper_proto_rawDescData)
	})
	return file_arkeo_arkeo_keeper_proto_rawDescData
}

var file_arkeo_arkeo_keeper_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_arkeo_arkeo_keeper_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_arkeo_arkeo_keeper_proto_goTypes = []interface{}{
	(ProviderStatus)(0),           // 0: arkeo.arkeo.ProviderStatus
	(ContractType)(0),             // 1: arkeo.arkeo.ContractType
	(ContractAuthorization)(0),    // 2: arkeo.arkeo.ContractAuthorization
	(*Provider)(nil),              // 3: arkeo.arkeo.Provider
	(*Contract)(nil),              // 4: arkeo.arkeo.Contract
	(*ContractSet)(nil),           // 5: arkeo.arkeo.ContractSet
	(*ContractExpirationSet)(nil), // 6: arkeo.arkeo.ContractExpirationSet
	(*UserContractSet)(nil),       // 7: arkeo.arkeo.UserContractSet
	(*v1beta1.Coin)(nil),          // 8: cosmos.base.v1beta1.Coin
}
var file_arkeo_arkeo_keeper_proto_depIdxs = []int32{
	0, // 0: arkeo.arkeo.Provider.status:type_name -> arkeo.arkeo.ProviderStatus
	8, // 1: arkeo.arkeo.Provider.subscription_rate:type_name -> cosmos.base.v1beta1.Coin
	8, // 2: arkeo.arkeo.Provider.pay_as_you_go_rate:type_name -> cosmos.base.v1beta1.Coin
	1, // 3: arkeo.arkeo.Contract.type:type_name -> arkeo.arkeo.ContractType
	8, // 4: arkeo.arkeo.Contract.rate:type_name -> cosmos.base.v1beta1.Coin
	2, // 5: arkeo.arkeo.Contract.authorization:type_name -> arkeo.arkeo.ContractAuthorization
	5, // 6: arkeo.arkeo.ContractExpirationSet.contract_set:type_name -> arkeo.arkeo.ContractSet
	5, // 7: arkeo.arkeo.UserContractSet.contract_set:type_name -> arkeo.arkeo.ContractSet
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_arkeo_arkeo_keeper_proto_init() }
func file_arkeo_arkeo_keeper_proto_init() {
	if File_arkeo_arkeo_keeper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arkeo_arkeo_keeper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arkeo_arkeo_keeper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arkeo_arkeo_keeper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arkeo_arkeo_keeper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractExpirationSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arkeo_arkeo_keeper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContractSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arkeo_arkeo_keeper_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arkeo_arkeo_keeper_proto_goTypes,
		DependencyIndexes: file_arkeo_arkeo_keeper_proto_depIdxs,
		EnumInfos:         file_arkeo_arkeo_keeper_proto_enumTypes,
		MessageInfos:      file_arkeo_arkeo_keeper_proto_msgTypes,
	}.Build()
	File_arkeo_arkeo_keeper_proto = out.File
	file_arkeo_arkeo_keeper_proto_rawDesc = nil
	file_arkeo_arkeo_keeper_proto_goTypes = nil
	file_arkeo_arkeo_keeper_proto_depIdxs = nil
}
