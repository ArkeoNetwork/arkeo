// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package claim

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_ClaimRecord                 protoreflect.MessageDescriptor
	fd_ClaimRecord_chain           protoreflect.FieldDescriptor
	fd_ClaimRecord_address         protoreflect.FieldDescriptor
	fd_ClaimRecord_amount_claim    protoreflect.FieldDescriptor
	fd_ClaimRecord_amount_vote     protoreflect.FieldDescriptor
	fd_ClaimRecord_amount_delegate protoreflect.FieldDescriptor
	fd_ClaimRecord_is_transferable protoreflect.FieldDescriptor
)

func init() {
	file_arkeo_claim_claim_record_proto_init()
	md_ClaimRecord = File_arkeo_claim_claim_record_proto.Messages().ByName("ClaimRecord")
	fd_ClaimRecord_chain = md_ClaimRecord.Fields().ByName("chain")
	fd_ClaimRecord_address = md_ClaimRecord.Fields().ByName("address")
	fd_ClaimRecord_amount_claim = md_ClaimRecord.Fields().ByName("amount_claim")
	fd_ClaimRecord_amount_vote = md_ClaimRecord.Fields().ByName("amount_vote")
	fd_ClaimRecord_amount_delegate = md_ClaimRecord.Fields().ByName("amount_delegate")
	fd_ClaimRecord_is_transferable = md_ClaimRecord.Fields().ByName("is_transferable")
}

var _ protoreflect.Message = (*fastReflection_ClaimRecord)(nil)

type fastReflection_ClaimRecord ClaimRecord

func (x *ClaimRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ClaimRecord)(x)
}

func (x *ClaimRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_arkeo_claim_claim_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ClaimRecord_messageType fastReflection_ClaimRecord_messageType
var _ protoreflect.MessageType = fastReflection_ClaimRecord_messageType{}

type fastReflection_ClaimRecord_messageType struct{}

func (x fastReflection_ClaimRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ClaimRecord)(nil)
}
func (x fastReflection_ClaimRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_ClaimRecord)
}
func (x fastReflection_ClaimRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ClaimRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ClaimRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_ClaimRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ClaimRecord) Type() protoreflect.MessageType {
	return _fastReflection_ClaimRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ClaimRecord) New() protoreflect.Message {
	return new(fastReflection_ClaimRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ClaimRecord) Interface() protoreflect.ProtoMessage {
	return (*ClaimRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ClaimRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Chain != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Chain))
		if !f(fd_ClaimRecord_chain, value) {
			return
		}
	}
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_ClaimRecord_address, value) {
			return
		}
	}
	if x.AmountClaim != nil {
		value := protoreflect.ValueOfMessage(x.AmountClaim.ProtoReflect())
		if !f(fd_ClaimRecord_amount_claim, value) {
			return
		}
	}
	if x.AmountVote != nil {
		value := protoreflect.ValueOfMessage(x.AmountVote.ProtoReflect())
		if !f(fd_ClaimRecord_amount_vote, value) {
			return
		}
	}
	if x.AmountDelegate != nil {
		value := protoreflect.ValueOfMessage(x.AmountDelegate.ProtoReflect())
		if !f(fd_ClaimRecord_amount_delegate, value) {
			return
		}
	}
	if x.IsTransferable != false {
		value := protoreflect.ValueOfBool(x.IsTransferable)
		if !f(fd_ClaimRecord_is_transferable, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ClaimRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "arkeo.claim.ClaimRecord.chain":
		return x.Chain != 0
	case "arkeo.claim.ClaimRecord.address":
		return x.Address != ""
	case "arkeo.claim.ClaimRecord.amount_claim":
		return x.AmountClaim != nil
	case "arkeo.claim.ClaimRecord.amount_vote":
		return x.AmountVote != nil
	case "arkeo.claim.ClaimRecord.amount_delegate":
		return x.AmountDelegate != nil
	case "arkeo.claim.ClaimRecord.is_transferable":
		return x.IsTransferable != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.claim.ClaimRecord"))
		}
		panic(fmt.Errorf("message arkeo.claim.ClaimRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "arkeo.claim.ClaimRecord.chain":
		x.Chain = 0
	case "arkeo.claim.ClaimRecord.address":
		x.Address = ""
	case "arkeo.claim.ClaimRecord.amount_claim":
		x.AmountClaim = nil
	case "arkeo.claim.ClaimRecord.amount_vote":
		x.AmountVote = nil
	case "arkeo.claim.ClaimRecord.amount_delegate":
		x.AmountDelegate = nil
	case "arkeo.claim.ClaimRecord.is_transferable":
		x.IsTransferable = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.claim.ClaimRecord"))
		}
		panic(fmt.Errorf("message arkeo.claim.ClaimRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ClaimRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "arkeo.claim.ClaimRecord.chain":
		value := x.Chain
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "arkeo.claim.ClaimRecord.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "arkeo.claim.ClaimRecord.amount_claim":
		value := x.AmountClaim
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "arkeo.claim.ClaimRecord.amount_vote":
		value := x.AmountVote
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "arkeo.claim.ClaimRecord.amount_delegate":
		value := x.AmountDelegate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "arkeo.claim.ClaimRecord.is_transferable":
		value := x.IsTransferable
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.claim.ClaimRecord"))
		}
		panic(fmt.Errorf("message arkeo.claim.ClaimRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "arkeo.claim.ClaimRecord.chain":
		x.Chain = (Chain)(value.Enum())
	case "arkeo.claim.ClaimRecord.address":
		x.Address = value.Interface().(string)
	case "arkeo.claim.ClaimRecord.amount_claim":
		x.AmountClaim = value.Message().Interface().(*v1beta1.Coin)
	case "arkeo.claim.ClaimRecord.amount_vote":
		x.AmountVote = value.Message().Interface().(*v1beta1.Coin)
	case "arkeo.claim.ClaimRecord.amount_delegate":
		x.AmountDelegate = value.Message().Interface().(*v1beta1.Coin)
	case "arkeo.claim.ClaimRecord.is_transferable":
		x.IsTransferable = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.claim.ClaimRecord"))
		}
		panic(fmt.Errorf("message arkeo.claim.ClaimRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.claim.ClaimRecord.amount_claim":
		if x.AmountClaim == nil {
			x.AmountClaim = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.AmountClaim.ProtoReflect())
	case "arkeo.claim.ClaimRecord.amount_vote":
		if x.AmountVote == nil {
			x.AmountVote = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.AmountVote.ProtoReflect())
	case "arkeo.claim.ClaimRecord.amount_delegate":
		if x.AmountDelegate == nil {
			x.AmountDelegate = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.AmountDelegate.ProtoReflect())
	case "arkeo.claim.ClaimRecord.chain":
		panic(fmt.Errorf("field chain of message arkeo.claim.ClaimRecord is not mutable"))
	case "arkeo.claim.ClaimRecord.address":
		panic(fmt.Errorf("field address of message arkeo.claim.ClaimRecord is not mutable"))
	case "arkeo.claim.ClaimRecord.is_transferable":
		panic(fmt.Errorf("field is_transferable of message arkeo.claim.ClaimRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.claim.ClaimRecord"))
		}
		panic(fmt.Errorf("message arkeo.claim.ClaimRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ClaimRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "arkeo.claim.ClaimRecord.chain":
		return protoreflect.ValueOfEnum(0)
	case "arkeo.claim.ClaimRecord.address":
		return protoreflect.ValueOfString("")
	case "arkeo.claim.ClaimRecord.amount_claim":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "arkeo.claim.ClaimRecord.amount_vote":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "arkeo.claim.ClaimRecord.amount_delegate":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "arkeo.claim.ClaimRecord.is_transferable":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: arkeo.claim.ClaimRecord"))
		}
		panic(fmt.Errorf("message arkeo.claim.ClaimRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ClaimRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in arkeo.claim.ClaimRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ClaimRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ClaimRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ClaimRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ClaimRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Chain != 0 {
			n += 1 + runtime.Sov(uint64(x.Chain))
		}
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AmountClaim != nil {
			l = options.Size(x.AmountClaim)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AmountVote != nil {
			l = options.Size(x.AmountVote)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AmountDelegate != nil {
			l = options.Size(x.AmountDelegate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsTransferable {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ClaimRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IsTransferable {
			i--
			if x.IsTransferable {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x30
		}
		if x.AmountDelegate != nil {
			encoded, err := options.Marshal(x.AmountDelegate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.AmountVote != nil {
			encoded, err := options.Marshal(x.AmountVote)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.AmountClaim != nil {
			encoded, err := options.Marshal(x.AmountClaim)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0x12
		}
		if x.Chain != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Chain))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ClaimRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ClaimRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ClaimRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
				}
				x.Chain = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Chain |= Chain(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountClaim", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AmountClaim == nil {
					x.AmountClaim = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AmountClaim); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountVote", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AmountVote == nil {
					x.AmountVote = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AmountVote); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountDelegate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AmountDelegate == nil {
					x.AmountDelegate = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AmountDelegate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsTransferable", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsTransferable = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: arkeo/claim/claim_record.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// actions for arkeo chain
type Action int32

const (
	Action_ACTION_CLAIM    Action = 0
	Action_ACTION_VOTE     Action = 1
	Action_ACTION_DELEGATE Action = 2
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ACTION_CLAIM",
		1: "ACTION_VOTE",
		2: "ACTION_DELEGATE",
	}
	Action_value = map[string]int32{
		"ACTION_CLAIM":    0,
		"ACTION_VOTE":     1,
		"ACTION_DELEGATE": 2,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_arkeo_claim_claim_record_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_arkeo_claim_claim_record_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_arkeo_claim_claim_record_proto_rawDescGZIP(), []int{0}
}

type Chain int32

const (
	Chain_ARKEO    Chain = 0
	Chain_ETHEREUM Chain = 1
)

// Enum value maps for Chain.
var (
	Chain_name = map[int32]string{
		0: "ARKEO",
		1: "ETHEREUM",
	}
	Chain_value = map[string]int32{
		"ARKEO":    0,
		"ETHEREUM": 1,
	}
)

func (x Chain) Enum() *Chain {
	p := new(Chain)
	*p = x
	return p
}

func (x Chain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chain) Descriptor() protoreflect.EnumDescriptor {
	return file_arkeo_claim_claim_record_proto_enumTypes[1].Descriptor()
}

func (Chain) Type() protoreflect.EnumType {
	return &file_arkeo_claim_claim_record_proto_enumTypes[1]
}

func (x Chain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chain.Descriptor instead.
func (Chain) EnumDescriptor() ([]byte, []int) {
	return file_arkeo_claim_claim_record_proto_rawDescGZIP(), []int{1}
}

// A Claim Records is the metadata of claim data per address
type ClaimRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain Chain `protobuf:"varint,1,opt,name=chain,proto3,enum=arkeo.claim.Chain" json:"chain,omitempty"`
	// arkeo address of claim user
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// claimable amount per action (claim, vote, delegate - changed to 0 after
	// action completed)
	AmountClaim    *v1beta1.Coin `protobuf:"bytes,3,opt,name=amount_claim,json=amountClaim,proto3" json:"amount_claim,omitempty"`
	AmountVote     *v1beta1.Coin `protobuf:"bytes,4,opt,name=amount_vote,json=amountVote,proto3" json:"amount_vote,omitempty"`
	AmountDelegate *v1beta1.Coin `protobuf:"bytes,5,opt,name=amount_delegate,json=amountDelegate,proto3" json:"amount_delegate,omitempty"`
	IsTransferable bool          `protobuf:"varint,6,opt,name=is_transferable,json=isTransferable,proto3" json:"is_transferable,omitempty"`
}

func (x *ClaimRecord) Reset() {
	*x = ClaimRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arkeo_claim_claim_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimRecord) ProtoMessage() {}

// Deprecated: Use ClaimRecord.ProtoReflect.Descriptor instead.
func (*ClaimRecord) Descriptor() ([]byte, []int) {
	return file_arkeo_claim_claim_record_proto_rawDescGZIP(), []int{0}
}

func (x *ClaimRecord) GetChain() Chain {
	if x != nil {
		return x.Chain
	}
	return Chain_ARKEO
}

func (x *ClaimRecord) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ClaimRecord) GetAmountClaim() *v1beta1.Coin {
	if x != nil {
		return x.AmountClaim
	}
	return nil
}

func (x *ClaimRecord) GetAmountVote() *v1beta1.Coin {
	if x != nil {
		return x.AmountVote
	}
	return nil
}

func (x *ClaimRecord) GetAmountDelegate() *v1beta1.Coin {
	if x != nil {
		return x.AmountDelegate
	}
	return nil
}

func (x *ClaimRecord) GetIsTransferable() bool {
	if x != nil {
		return x.IsTransferable
	}
	return false
}

var File_arkeo_claim_claim_record_proto protoreflect.FileDescriptor

var file_arkeo_claim_claim_record_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x03, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xf2, 0xde, 0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x1b, 0xc8, 0xde,
	0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x56, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x1a, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x12,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x22, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x62,
	0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x1e, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x16, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x22, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2a, 0x46, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x04, 0x88,
	0xa3, 0x1e, 0x00, 0x2a, 0x26, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x52, 0x4b, 0x45, 0x4f, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x45, 0x55, 0x4d, 0x10, 0x01, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x8e, 0x01, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x42,
	0x10, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x6b, 0x65, 0x6f, 0x2f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x72, 0x6b, 0x65, 0x6f, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0xca, 0x02, 0x0b, 0x41, 0x72, 0x6b, 0x65, 0x6f, 0x5c, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0xe2, 0x02, 0x17, 0x41, 0x72, 0x6b, 0x65, 0x6f, 0x5c, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c,
	0x41, 0x72, 0x6b, 0x65, 0x6f, 0x3a, 0x3a, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arkeo_claim_claim_record_proto_rawDescOnce sync.Once
	file_arkeo_claim_claim_record_proto_rawDescData = file_arkeo_claim_claim_record_proto_rawDesc
)

func file_arkeo_claim_claim_record_proto_rawDescGZIP() []byte {
	file_arkeo_claim_claim_record_proto_rawDescOnce.Do(func() {
		file_arkeo_claim_claim_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_arkeo_claim_claim_record_proto_rawDescData)
	})
	return file_arkeo_claim_claim_record_proto_rawDescData
}

var file_arkeo_claim_claim_record_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_arkeo_claim_claim_record_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_arkeo_claim_claim_record_proto_goTypes = []interface{}{
	(Action)(0),          // 0: arkeo.claim.Action
	(Chain)(0),           // 1: arkeo.claim.Chain
	(*ClaimRecord)(nil),  // 2: arkeo.claim.ClaimRecord
	(*v1beta1.Coin)(nil), // 3: cosmos.base.v1beta1.Coin
}
var file_arkeo_claim_claim_record_proto_depIdxs = []int32{
	1, // 0: arkeo.claim.ClaimRecord.chain:type_name -> arkeo.claim.Chain
	3, // 1: arkeo.claim.ClaimRecord.amount_claim:type_name -> cosmos.base.v1beta1.Coin
	3, // 2: arkeo.claim.ClaimRecord.amount_vote:type_name -> cosmos.base.v1beta1.Coin
	3, // 3: arkeo.claim.ClaimRecord.amount_delegate:type_name -> cosmos.base.v1beta1.Coin
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_arkeo_claim_claim_record_proto_init() }
func file_arkeo_claim_claim_record_proto_init() {
	if File_arkeo_claim_claim_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arkeo_claim_claim_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arkeo_claim_claim_record_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arkeo_claim_claim_record_proto_goTypes,
		DependencyIndexes: file_arkeo_claim_claim_record_proto_depIdxs,
		EnumInfos:         file_arkeo_claim_claim_record_proto_enumTypes,
		MessageInfos:      file_arkeo_claim_claim_record_proto_msgTypes,
	}.Build()
	File_arkeo_claim_claim_record_proto = out.File
	file_arkeo_claim_claim_record_proto_rawDesc = nil
	file_arkeo_claim_claim_record_proto_goTypes = nil
	file_arkeo_claim_claim_record_proto_depIdxs = nil
}
