// DONTCOVER
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arkeo/claim/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgClaimEth struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	EthAddress string `protobuf:"bytes,2,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	Signature  string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgClaimEth) Reset()         { *m = MsgClaimEth{} }
func (m *MsgClaimEth) String() string { return proto.CompactTextString(m) }
func (*MsgClaimEth) ProtoMessage()    {}
func (*MsgClaimEth) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{0}
}
func (m *MsgClaimEth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimEth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimEth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimEth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimEth.Merge(m, src)
}
func (m *MsgClaimEth) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimEth) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimEth.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimEth proto.InternalMessageInfo

func (m *MsgClaimEth) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimEth) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *MsgClaimEth) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgClaimEthResponse struct {
}

func (m *MsgClaimEthResponse) Reset()         { *m = MsgClaimEthResponse{} }
func (m *MsgClaimEthResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimEthResponse) ProtoMessage()    {}
func (*MsgClaimEthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{1}
}
func (m *MsgClaimEthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimEthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimEthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimEthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimEthResponse.Merge(m, src)
}
func (m *MsgClaimEthResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimEthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimEthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimEthResponse proto.InternalMessageInfo

type MsgClaimArkeo struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgClaimArkeo) Reset()         { *m = MsgClaimArkeo{} }
func (m *MsgClaimArkeo) String() string { return proto.CompactTextString(m) }
func (*MsgClaimArkeo) ProtoMessage()    {}
func (*MsgClaimArkeo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{2}
}
func (m *MsgClaimArkeo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimArkeo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimArkeo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimArkeo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimArkeo.Merge(m, src)
}
func (m *MsgClaimArkeo) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimArkeo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimArkeo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimArkeo proto.InternalMessageInfo

func (m *MsgClaimArkeo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgClaimArkeoResponse struct {
}

func (m *MsgClaimArkeoResponse) Reset()         { *m = MsgClaimArkeoResponse{} }
func (m *MsgClaimArkeoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimArkeoResponse) ProtoMessage()    {}
func (*MsgClaimArkeoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{3}
}
func (m *MsgClaimArkeoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimArkeoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimArkeoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimArkeoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimArkeoResponse.Merge(m, src)
}
func (m *MsgClaimArkeoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimArkeoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimArkeoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimArkeoResponse proto.InternalMessageInfo

type MsgTransferClaim struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ToAddress string `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
}

func (m *MsgTransferClaim) Reset()         { *m = MsgTransferClaim{} }
func (m *MsgTransferClaim) String() string { return proto.CompactTextString(m) }
func (*MsgTransferClaim) ProtoMessage()    {}
func (*MsgTransferClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{4}
}
func (m *MsgTransferClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferClaim.Merge(m, src)
}
func (m *MsgTransferClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferClaim proto.InternalMessageInfo

func (m *MsgTransferClaim) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferClaim) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

type MsgTransferClaimResponse struct {
}

func (m *MsgTransferClaimResponse) Reset()         { *m = MsgTransferClaimResponse{} }
func (m *MsgTransferClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferClaimResponse) ProtoMessage()    {}
func (*MsgTransferClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{5}
}
func (m *MsgTransferClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferClaimResponse.Merge(m, src)
}
func (m *MsgTransferClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferClaimResponse proto.InternalMessageInfo

type MsgAddClaim struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain   Chain  `protobuf:"varint,2,opt,name=chain,proto3,enum=arkeo.claim.Chain" json:"chain,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount  int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgAddClaim) Reset()         { *m = MsgAddClaim{} }
func (m *MsgAddClaim) String() string { return proto.CompactTextString(m) }
func (*MsgAddClaim) ProtoMessage()    {}
func (*MsgAddClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{6}
}
func (m *MsgAddClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddClaim.Merge(m, src)
}
func (m *MsgAddClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddClaim proto.InternalMessageInfo

func (m *MsgAddClaim) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddClaim) GetChain() Chain {
	if m != nil {
		return m.Chain
	}
	return ARKEO
}

func (m *MsgAddClaim) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgAddClaim) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type MsgAddClaimResponse struct {
}

func (m *MsgAddClaimResponse) Reset()         { *m = MsgAddClaimResponse{} }
func (m *MsgAddClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddClaimResponse) ProtoMessage()    {}
func (*MsgAddClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{7}
}
func (m *MsgAddClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddClaimResponse.Merge(m, src)
}
func (m *MsgAddClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddClaimResponse proto.InternalMessageInfo

type MsgClaimThorchain struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
}

func (m *MsgClaimThorchain) Reset()         { *m = MsgClaimThorchain{} }
func (m *MsgClaimThorchain) String() string { return proto.CompactTextString(m) }
func (*MsgClaimThorchain) ProtoMessage()    {}
func (*MsgClaimThorchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{8}
}
func (m *MsgClaimThorchain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimThorchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimThorchain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimThorchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimThorchain.Merge(m, src)
}
func (m *MsgClaimThorchain) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimThorchain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimThorchain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimThorchain proto.InternalMessageInfo

func (m *MsgClaimThorchain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimThorchain) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgClaimThorchain) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

type MsgClaimThorchainResponse struct {
}

func (m *MsgClaimThorchainResponse) Reset()         { *m = MsgClaimThorchainResponse{} }
func (m *MsgClaimThorchainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimThorchainResponse) ProtoMessage()    {}
func (*MsgClaimThorchainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a4ddac60cb43154, []int{9}
}
func (m *MsgClaimThorchainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimThorchainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimThorchainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimThorchainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimThorchainResponse.Merge(m, src)
}
func (m *MsgClaimThorchainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimThorchainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimThorchainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimThorchainResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgClaimEth)(nil), "arkeo.claim.MsgClaimEth")
	proto.RegisterType((*MsgClaimEthResponse)(nil), "arkeo.claim.MsgClaimEthResponse")
	proto.RegisterType((*MsgClaimArkeo)(nil), "arkeo.claim.MsgClaimArkeo")
	proto.RegisterType((*MsgClaimArkeoResponse)(nil), "arkeo.claim.MsgClaimArkeoResponse")
	proto.RegisterType((*MsgTransferClaim)(nil), "arkeo.claim.MsgTransferClaim")
	proto.RegisterType((*MsgTransferClaimResponse)(nil), "arkeo.claim.MsgTransferClaimResponse")
	proto.RegisterType((*MsgAddClaim)(nil), "arkeo.claim.MsgAddClaim")
	proto.RegisterType((*MsgAddClaimResponse)(nil), "arkeo.claim.MsgAddClaimResponse")
	proto.RegisterType((*MsgClaimThorchain)(nil), "arkeo.claim.MsgClaimThorchain")
	proto.RegisterType((*MsgClaimThorchainResponse)(nil), "arkeo.claim.MsgClaimThorchainResponse")
}

func init() { proto.RegisterFile("arkeo/claim/tx.proto", fileDescriptor_6a4ddac60cb43154) }

var fileDescriptor_6a4ddac60cb43154 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x09, 0xfd, 0x91, 0x17, 0x5a, 0xc1, 0x91, 0x52, 0xd7, 0x50, 0x13, 0x2c, 0x81, 0x22,
	0x10, 0xb1, 0x08, 0x12, 0x7b, 0x1a, 0xb5, 0x13, 0x59, 0x4c, 0x91, 0x10, 0x4b, 0xe4, 0xda, 0x57,
	0xdb, 0x2a, 0xf6, 0x45, 0x77, 0x17, 0x28, 0x0b, 0xea, 0xca, 0xc6, 0x8e, 0xf8, 0x1f, 0x18, 0xf8,
	0x23, 0x18, 0x2b, 0x26, 0x46, 0x94, 0x0c, 0xfc, 0x1b, 0x95, 0xef, 0x7c, 0xae, 0xed, 0xb4, 0x19,
	0xb2, 0xd8, 0x7e, 0xef, 0x7b, 0xef, 0xf3, 0xf7, 0xee, 0x7d, 0x3a, 0x68, 0xb9, 0xf4, 0x04, 0x13,
	0xdb, 0xfb, 0xe0, 0x46, 0xb1, 0xcd, 0x4f, 0xbb, 0x63, 0x4a, 0x38, 0x41, 0x4d, 0x91, 0xed, 0x8a,
	0xac, 0xb1, 0xe3, 0x11, 0x16, 0x13, 0x36, 0x12, 0x90, 0x2d, 0x03, 0x59, 0x67, 0x98, 0xc5, 0x6e,
	0xf1, 0x1c, 0x51, 0xec, 0x11, 0xea, 0x67, 0x78, 0x2b, 0x20, 0x01, 0x91, 0x7d, 0xe9, 0x57, 0x96,
	0xdd, 0x96, 0x1c, 0x76, 0xcc, 0x02, 0xfb, 0xe3, 0x8b, 0xf4, 0x25, 0x01, 0xeb, 0x4c, 0x83, 0xe6,
	0x90, 0x05, 0x83, 0x94, 0x68, 0x9f, 0x87, 0xa8, 0x07, 0x6b, 0x1e, 0xc5, 0x2e, 0x27, 0x54, 0xd7,
	0xda, 0x5a, 0xa7, 0xb1, 0xa7, 0xff, 0xf9, 0xf5, 0xbc, 0x95, 0x29, 0xe8, 0xfb, 0x3e, 0xc5, 0x8c,
	0xbd, 0xe1, 0x34, 0x4a, 0x02, 0x47, 0x15, 0xa2, 0x87, 0xd0, 0xc4, 0x3c, 0x1c, 0xb9, 0x12, 0xd5,
	0x6f, 0xa4, 0x7d, 0x0e, 0x60, 0x1e, 0x66, 0xf5, 0xe8, 0x01, 0x34, 0x58, 0x14, 0x24, 0x2e, 0x9f,
	0x50, 0xac, 0xd7, 0x05, 0x7c, 0x99, 0xb0, 0xb6, 0xe0, 0x6e, 0x41, 0x81, 0x83, 0xd9, 0x98, 0x24,
	0x0c, 0x5b, 0x03, 0xd8, 0x50, 0xe9, 0x7e, 0x3a, 0xf2, 0x32, 0xd2, 0xac, 0x6d, 0xd8, 0x2a, 0x91,
	0xe4, 0xec, 0x5f, 0xe0, 0xf6, 0x90, 0x05, 0x87, 0xd4, 0x4d, 0xd8, 0x31, 0xa6, 0xa2, 0x60, 0xa9,
	0xd9, 0x5f, 0x41, 0x83, 0x93, 0x7e, 0x71, 0xf2, 0x05, 0x5d, 0x97, 0xa5, 0x96, 0x01, 0x7a, 0xf5,
	0xff, 0xb9, 0xb6, 0x1f, 0x72, 0x27, 0x7d, 0xdf, 0x5f, 0x5e, 0x57, 0x07, 0x56, 0xbc, 0xd0, 0x8d,
	0x12, 0xa1, 0x69, 0xb3, 0x87, 0xba, 0x05, 0x7b, 0x75, 0x07, 0x29, 0xe2, 0xc8, 0x02, 0xa4, 0xc3,
	0x9a, 0xda, 0x9c, 0x5c, 0x8d, 0x0a, 0xd1, 0x3d, 0x58, 0x75, 0x63, 0x32, 0x49, 0xb8, 0x7e, 0xb3,
	0xad, 0x75, 0xea, 0x4e, 0x16, 0x65, 0x0b, 0x53, 0xf2, 0x72, 0xd9, 0x5f, 0x35, 0xb8, 0xa3, 0x0e,
	0xfb, 0x30, 0x24, 0x54, 0xd2, 0x2f, 0x23, 0xfe, 0x11, 0xdc, 0x3a, 0xa6, 0x24, 0xae, 0x38, 0xaa,
	0x99, 0xe6, 0x94, 0xa5, 0x76, 0x01, 0x38, 0x19, 0x95, 0x85, 0x17, 0x8e, 0xf7, 0x3e, 0xec, 0xcc,
	0x49, 0x51, 0x42, 0x7b, 0xdf, 0xeb, 0x50, 0x1f, 0xb2, 0x00, 0x1d, 0xc0, 0x7a, 0xee, 0x7b, 0xbd,
	0x74, 0x40, 0x05, 0x3f, 0x1a, 0xed, 0xeb, 0x10, 0xc5, 0x87, 0x5e, 0x03, 0x14, 0x6c, 0x6a, 0x5c,
	0x59, 0x2f, 0x30, 0xc3, 0xba, 0x1e, 0xcb, 0xd9, 0xde, 0xc2, 0x46, 0xd9, 0x96, 0xbb, 0xd5, 0xa6,
	0x12, 0x6c, 0x3c, 0x5e, 0x08, 0xe7, 0xb4, 0x07, 0xb0, 0x9e, 0x1b, 0x6a, 0x6e, 0x58, 0x85, 0xcc,
	0x0f, 0x5b, 0xdd, 0x32, 0x7a, 0x07, 0x9b, 0x95, 0x0d, 0x9b, 0x57, 0x0e, 0x95, 0xe3, 0xc6, 0x93,
	0xc5, 0xb8, 0x62, 0x36, 0x56, 0xce, 0xfe, 0xff, 0x7c, 0xaa, 0xed, 0xed, 0xff, 0x9e, 0x9a, 0xda,
	0xf9, 0xd4, 0xd4, 0xfe, 0x4d, 0x4d, 0xed, 0xdb, 0xcc, 0xac, 0x9d, 0xcf, 0xcc, 0xda, 0xdf, 0x99,
	0x59, 0x7b, 0xff, 0x2c, 0x88, 0x78, 0x38, 0x39, 0xea, 0x7a, 0x24, 0xb6, 0x05, 0x65, 0x82, 0xf9,
	0x27, 0x42, 0x4f, 0x64, 0x60, 0x9f, 0xaa, 0x2b, 0xf5, 0xf3, 0x18, 0xb3, 0xa3, 0x55, 0x71, 0xbf,
	0xbd, 0xbc, 0x08, 0x00, 0x00, 0xff, 0xff, 0x10, 0x32, 0x6b, 0x7c, 0x6e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ClaimEth(ctx context.Context, in *MsgClaimEth, opts ...grpc.CallOption) (*MsgClaimEthResponse, error)
	ClaimArkeo(ctx context.Context, in *MsgClaimArkeo, opts ...grpc.CallOption) (*MsgClaimArkeoResponse, error)
	TransferClaim(ctx context.Context, in *MsgTransferClaim, opts ...grpc.CallOption) (*MsgTransferClaimResponse, error)
	AddClaim(ctx context.Context, in *MsgAddClaim, opts ...grpc.CallOption) (*MsgAddClaimResponse, error)
	ClaimThorchain(ctx context.Context, in *MsgClaimThorchain, opts ...grpc.CallOption) (*MsgClaimThorchainResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ClaimEth(ctx context.Context, in *MsgClaimEth, opts ...grpc.CallOption) (*MsgClaimEthResponse, error) {
	out := new(MsgClaimEthResponse)
	err := c.cc.Invoke(ctx, "/arkeo.claim.Msg/ClaimEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimArkeo(ctx context.Context, in *MsgClaimArkeo, opts ...grpc.CallOption) (*MsgClaimArkeoResponse, error) {
	out := new(MsgClaimArkeoResponse)
	err := c.cc.Invoke(ctx, "/arkeo.claim.Msg/ClaimArkeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferClaim(ctx context.Context, in *MsgTransferClaim, opts ...grpc.CallOption) (*MsgTransferClaimResponse, error) {
	out := new(MsgTransferClaimResponse)
	err := c.cc.Invoke(ctx, "/arkeo.claim.Msg/TransferClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddClaim(ctx context.Context, in *MsgAddClaim, opts ...grpc.CallOption) (*MsgAddClaimResponse, error) {
	out := new(MsgAddClaimResponse)
	err := c.cc.Invoke(ctx, "/arkeo.claim.Msg/AddClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimThorchain(ctx context.Context, in *MsgClaimThorchain, opts ...grpc.CallOption) (*MsgClaimThorchainResponse, error) {
	out := new(MsgClaimThorchainResponse)
	err := c.cc.Invoke(ctx, "/arkeo.claim.Msg/ClaimThorchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ClaimEth(context.Context, *MsgClaimEth) (*MsgClaimEthResponse, error)
	ClaimArkeo(context.Context, *MsgClaimArkeo) (*MsgClaimArkeoResponse, error)
	TransferClaim(context.Context, *MsgTransferClaim) (*MsgTransferClaimResponse, error)
	AddClaim(context.Context, *MsgAddClaim) (*MsgAddClaimResponse, error)
	ClaimThorchain(context.Context, *MsgClaimThorchain) (*MsgClaimThorchainResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ClaimEth(ctx context.Context, req *MsgClaimEth) (*MsgClaimEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimEth not implemented")
}
func (*UnimplementedMsgServer) ClaimArkeo(ctx context.Context, req *MsgClaimArkeo) (*MsgClaimArkeoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimArkeo not implemented")
}
func (*UnimplementedMsgServer) TransferClaim(ctx context.Context, req *MsgTransferClaim) (*MsgTransferClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferClaim not implemented")
}
func (*UnimplementedMsgServer) AddClaim(ctx context.Context, req *MsgAddClaim) (*MsgAddClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClaim not implemented")
}
func (*UnimplementedMsgServer) ClaimThorchain(ctx context.Context, req *MsgClaimThorchain) (*MsgClaimThorchainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimThorchain not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ClaimEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.claim.Msg/ClaimEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimEth(ctx, req.(*MsgClaimEth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimArkeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimArkeo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimArkeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.claim.Msg/ClaimArkeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimArkeo(ctx, req.(*MsgClaimArkeo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.claim.Msg/TransferClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferClaim(ctx, req.(*MsgTransferClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.claim.Msg/AddClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddClaim(ctx, req.(*MsgAddClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimThorchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimThorchain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimThorchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.claim.Msg/ClaimThorchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimThorchain(ctx, req.(*MsgClaimThorchain))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arkeo.claim.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimEth",
			Handler:    _Msg_ClaimEth_Handler,
		},
		{
			MethodName: "ClaimArkeo",
			Handler:    _Msg_ClaimArkeo_Handler,
		},
		{
			MethodName: "TransferClaim",
			Handler:    _Msg_TransferClaim_Handler,
		},
		{
			MethodName: "AddClaim",
			Handler:    _Msg_AddClaim_Handler,
		},
		{
			MethodName: "ClaimThorchain",
			Handler:    _Msg_ClaimThorchain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arkeo/claim/tx.proto",
}

func (m *MsgClaimEth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimEth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimEth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimEthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimEthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimEthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimArkeo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimArkeo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimArkeo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimArkeoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimArkeoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimArkeoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Chain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimThorchain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimThorchain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimThorchain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimThorchainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimThorchainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimThorchainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgClaimEth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimEthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimArkeo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimArkeoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Chain != 0 {
		n += 1 + sovTx(uint64(m.Chain))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgAddClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimThorchain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimThorchainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgClaimEth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimEth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimEth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimEthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimEthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimEthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimArkeo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimArkeo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimArkeo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimArkeoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimArkeoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimArkeoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= Chain(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimThorchain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimThorchain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimThorchain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimThorchainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimThorchainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimThorchainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
